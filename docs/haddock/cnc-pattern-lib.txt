-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Haskell library for creating SVG patterns for CNC routers
--   
--   Please see the README on GitHub at for more info
--   <a>https://github.com/mazelife/cnc-pattern-lib#readme</a>
@package cnc-pattern-lib
@version 0.1.0.0


-- | Provides a typeclass for for comparing shapes that are approxmately
--   the same size and have the same position in 2-d space.
module ApproxEq
class Show s => ApproxEq s

-- | Are two shapes identical to within a given tolerance?
approxEqual :: ApproxEq s => s -> s -> Float -> Bool

-- | Are two shapes identical to within a given tolerance? Infix version
--   where epsilon is fixed at 0.0001.
(=~) :: ApproxEq s => s -> s -> Bool

-- | Helpful assertion for testing.
assertApproxEqual :: (ApproxEq s, HasCallStack) => s -> s -> Float -> Assertion

-- | Helpful assertion for testing. Infix version where epsilon is fixed at
--   0.01.
(@?~) :: ApproxEq s => s -> s -> Assertion

module Helpers
roundToStr :: (PrintfArg a, Floating a) => Int -> a -> String
fta :: Float -> AttributeValue
applyAttrs :: [Attribute] -> Svg -> Svg

module Point

-- | A point in 2-d space:
--   
--   <pre>
--   Point 3 4
--   </pre>
data Point
pattern Point :: () => !Float -> !Float -> Point

-- | Extract the x axis value from a point
xVal :: Point -> Float

-- | Extract the y axis value from a point
yVal :: Point -> Float

-- | Construct a point from a scalar value.
fromFloat :: Float -> Point

-- | Map a float -&gt; float function over a point.
pointMap :: (Float -> Float) -> Point -> Point

-- | Convert a point to a 2-tuple representation.
asTuple :: Point -> (Float, Float)

-- | Add a scalar value to a point:
--   
--   <pre>
--   &gt;&gt;&gt; Point 1 2 |+| 5
--   Point 6 7
--   </pre>
(|+|) :: Point -> Float -> Point

-- | Multiply a point by a scalar value:
--   
--   <pre>
--   &gt;&gt;&gt; Point 1 2 |*| 5
--   Point 5 10
--   </pre>
(|*|) :: Point -> Float -> Point

-- | Divide a point by a scalar value:
--   
--   <pre>
--   &gt;&gt;&gt; Point 10 10 |/| 5
--   Point 2 2
--   </pre>
(|/|) :: Point -> Float -> Point
cross :: Point -> Point -> Float
dot :: Point -> Point -> Float
angleBetween :: Point -> Point -> Float
mag :: Point -> Float
magSquared :: Point -> Float

-- | Mirror point a about a line through point p along vector v
mirror :: Point -> Point -> Point -> Point

-- | Rotate point a about a line through point p along vector t
rotate :: Point -> Point -> Float -> Point

-- | Return the cartesian product of a set of coordinates on the X axis and
--   a set of coordinates on the Y axis as a series of points.
cartesianProduct :: [Float] -> [Float] -> [Point]
instance GHC.Show.Show Point.Point
instance GHC.Classes.Eq Point.Point
instance GHC.Num.Num Point.Point
instance GHC.Real.Fractional Point.Point
instance GHC.Float.Floating Point.Point
instance ApproxEq.ApproxEq Point.Point
instance GHC.Classes.Ord Point.Point


-- | Typeclasses for shapes
module Shape

-- | Typeclass for shapes that can be converted to SVG elements
class SvgShape s

-- | Convert a shape to a <a>blaze-svg</a> element.
toSvg :: SvgShape s => s -> Svg

-- | Typeclass for shapes that have transformation operations in cartesian
--   space
class Transformable s

-- | Move a shape in space adding the given scalar to the X and Y axes.
translate :: Transformable s => s -> Float -> s

-- | Move a shape in space adding the given point to the X and Y axes.
translateP :: Transformable s => s -> Point -> s

-- | Rotate a shape about a line through point p along vector t
rotate :: Transformable s => s -> Point -> Float -> s

-- | Mirror a shape about a line through point p along vector v
mirror :: Transformable s => s -> Point -> Point -> s
offset :: Transformable s => s -> Point -> Bool -> s
class Mergable s

-- | If two shapes can be merged into one, returen the merged shape Makes
--   the most sense for lines and arcs.
merge :: Mergable s => s -> s -> Float -> Maybe s

-- | Merge all shapes in a given list that can be merged
optimize :: Mergable s => [s] -> Float -> [s]

module Line
data Line
pattern Line :: () => Point -> Point -> Line
start :: Line -> Point
end :: Line -> Point

-- | Short-form constructor for a line.
mkLine :: Float -> Float -> Float -> Float -> Line

-- | Represent a line as a 4-tuple.
asTuple :: Line -> (Float, Float, Float, Float)

-- | Calculate the length of a line.
lineLength :: Line -> Float

-- | Calculate the slope of a line.
slope :: Line -> Either String Float

-- | Are two lines parallel?
areParallel :: Line -> Line -> Float -> Bool

-- | Does the given point lie inside the given line segment?
containsPoint :: Point -> Line -> Bool

-- | Are two line (segments) overlapping? (i.e. are collinear and the
--   enpoint of one is contained within length of the other)
overlappingSegments :: Line -> Line -> Bool
instance GHC.Show.Show Line.Line
instance GHC.Classes.Eq Line.Line
instance Shape.SvgShape Line.Line
instance ApproxEq.ApproxEq Line.Line
instance Shape.Transformable Line.Line
instance Shape.Mergable Line.Line
instance GHC.Classes.Ord Line.Line


-- | A type representing a parallelogram (doesn't just have to be a
--   rectangle).
module Rectangle
data Rectangle
Rectangle :: Point -> Point -> Point -> Point -> Rectangle
[topLeft] :: Rectangle -> Point
[topRight] :: Rectangle -> Point
[bottomRight] :: Rectangle -> Point
[bottomLeft] :: Rectangle -> Point

-- | Constructor for a rectangle; supply one point for the top left and one
--   point for the bottom right.
mkRectangle :: Point -> Point -> Rectangle

-- | Map a function over each point in the rectangle.
mapPoints :: (Point -> Point) -> Rectangle -> Rectangle

-- | Midpoint of a rectangle.
origin :: Rectangle -> Point

-- | Convert a rectangle to a list of lines
asLines :: Rectangle -> [Line]
instance GHC.Show.Show Rectangle.Rectangle
instance GHC.Classes.Eq Rectangle.Rectangle
instance Shape.SvgShape Rectangle.Rectangle
instance ApproxEq.ApproxEq Rectangle.Rectangle
instance Shape.Transformable Rectangle.Rectangle
instance Shape.Mergable Rectangle.Rectangle

module Circle
data Circle
Circle :: Point -> !Float -> Circle
[center] :: Circle -> Point
[radius] :: Circle -> !Float
mkCircle :: Float -> Float -> Float -> Circle

-- | Convert a circle to a 2-tuple representation.
asTuple :: Circle -> ((Float, Float), Float)
circumference :: Circle -> Float
instance GHC.Show.Show Circle.Circle
instance GHC.Classes.Eq Circle.Circle
instance Shape.SvgShape Circle.Circle
instance ApproxEq.ApproxEq Circle.Circle
instance Shape.Transformable Circle.Circle
instance Shape.Mergable Circle.Circle
instance GHC.Classes.Ord Circle.Circle

module Arc

-- | Represents an arc with center, radius, ccw from start to end. note
--   that angles must be in (-pi, pi)
data Arc
pattern Arc :: () => Point -> !Float -> !Float -> !Float -> Arc

-- | Calculate the SVG path defition for an Arc
svgPathDefinition :: Arc -> String

-- | Convert a circle to a 2-tuple representation.
asTuple :: Arc -> (Float, Float, Float, Float, Float)
midpoint :: Arc -> Float -> Point
arcLength :: Arc -> Float

-- | Reflect a point p about the arc at point b.
invert :: Arc -> Point -> Point -> Point
instance GHC.Show.Show Arc.Arc
instance GHC.Classes.Eq Arc.Arc
instance Shape.SvgShape Arc.Arc
instance ApproxEq.ApproxEq Arc.Arc
instance Shape.Transformable Arc.Arc
instance Shape.Mergable Arc.Arc
instance GHC.Classes.Ord Arc.Arc

module Style
data StyleAttrs
pattern StyleAttrs :: () => Maybe String -> Maybe Float -> Maybe String -> StyleAttrs
strokeColor :: StyleAttrs -> Maybe String
strokeWidth :: StyleAttrs -> Maybe Float
fillColor :: StyleAttrs -> Maybe String
withStrokeColor :: String -> StyleAttrs
defaultStyleAttrs :: StyleAttrs
getAttrs :: StyleAttrs -> [Attribute]
applyStyle :: StyleAttrs -> Svg -> Svg
maybeApplyStyle :: Maybe StyleAttrs -> Svg -> Svg
instance GHC.Show.Show Style.StyleAttrs
instance GHC.Classes.Eq Style.StyleAttrs


-- | A module for creating collections of heterogenous shape types with
--   uniform styling and rendering them as SVG elements.
module Layer

-- | We use an existential type to wrap anything that meets our defintition
--   of a shape. That is to say it can be shown, can be transformed
--   according to methods in the Transformable typeclass, and can be
--   converted to an SVG element. This includes arcs, circles, lines, and
--   rectangles. Heterogenous shapes can all be placed in a single list and
--   transformed via this type.
data ShapeLike
pattern MkShape :: () => a -> ShapeLike

-- | A layer is just a sequence of shape-like things with a name and style
data Layer
shapes :: Layer -> [ShapeLike]
style :: Layer -> Maybe StyleAttrs

-- | Layer constructor from a list of shapes: without style
mkLayer :: (Show a, SvgShape a, Transformable a) => String -> [a] -> Layer

-- | Layer constructor from a list of shapes: with style
mkLayerWithStyle :: (Show a, SvgShape a, Transformable a) => String -> [a] -> StyleAttrs -> Layer

-- | A constructor to create a shape-like object from any shape.
pack :: (Show a, SvgShape a, Transformable a) => a -> ShapeLike

-- | Cons operation on a layer:
--   
--   <pre>
--   layer = mkLayer "layer-1" [shape1, shape3, shape3]
--   </pre>
--   
--   <pre>
--   newlayer = shape+: layer
--   </pre>
(+:) :: (Show a, SvgShape a, Transformable a) => a -> Layer -> Layer
infixr 5 +:

-- | Functions that mirror those in the Transformable typeclass, but act on
--   a whole layer of shapes, rather than a single shape.
translate :: Layer -> Float -> Layer
translateP :: Layer -> Point -> Layer
rotate :: Layer -> Point -> Float -> Layer
mirror :: Layer -> Point -> Point -> Layer
offset :: Layer -> Point -> Bool -> Layer
instance GHC.Classes.Eq Layer.Layer
instance GHC.Show.Show Layer.Layer
instance Shape.SvgShape Layer.Layer
instance GHC.Base.Semigroup Layer.Layer
instance GHC.Base.Monoid Layer.Layer
instance GHC.Show.Show Layer.ShapeLike
instance GHC.Classes.Eq Layer.ShapeLike
instance Shape.SvgShape Layer.ShapeLike
instance Shape.Transformable Layer.ShapeLike
instance Shape.SvgShape [Layer.ShapeLike]


-- | A Scene encapsualtes all SVG elements that will be rendered to a file.
module Scene
data Scene
pattern Scene :: () => Float -> Float -> StyleAttrs -> [Svg] -> Scene
width :: Scene -> Float
height :: Scene -> Float
style :: Scene -> StyleAttrs
elements :: Scene -> [Svg]

-- | Create a scene (without an associated style). Provide height, width
--   (in inches) and a list of layers.
mkScene :: Float -> Float -> [Layer] -> Scene

-- | Create a scene (with an associated style). Provide height, width (in
--   inches), style, and a list of layers.
mkSceneWithStyle :: Float -> Float -> StyleAttrs -> [Layer] -> Scene

-- | Given a scene and an SVG element representing it's contents, render
--   the final scene.
svgDoc :: Scene -> Svg -> Svg
emptyScene :: Float -> Float -> StyleAttrs -> Scene
addElement :: SvgShape s => Scene -> s -> Scene

-- | Render a scene to a string containin all SVG code.
renderScene :: IO Scene -> IO String
instance GHC.Show.Show Scene.Scene
instance Shape.SvgShape Scene.Scene


-- | A module for creating collections of homogenous shape types,
--   optimizing shapes (combining paths when possible or removing
--   duplicates), applying transformations to all of them, and rendering
--   them as SVG elements.
module Group

-- | A type reprresenting a named group of some type of shape.
newtype Group shape
Group :: [shape] -> Group shape

-- | Convert a group to a layer.
toLayer :: (Show a, SvgShape a, Transformable a) => String -> Group a -> Layer

-- | Number of shapes in the group.
size :: Group a -> Int

-- | Remove any duplicate shapes from this group
deduplicate :: (Ord t, ApproxEq t) => Group t -> Group t
transformAndAppend :: (Show a, SvgShape a, Transformable a, Mergable a) => (a -> a) -> Group a -> Group a

-- | Produce a new group where all shapes that can be merged have been,
--   plus all shapes that couldn't be.
optimizeGroup :: Mergable a => Group a -> Float -> Group a

-- | Produce a new group where all shapes that can be merged have been,
--   plus all shapes that couldn't be, logging the result at the end.
optimizeGroupAndLog :: Mergable a => Group a -> Float -> IO (Group a)

-- | Wrap a group of shapes into an SVG <a>g</a> element, including a
--   comment with the name of the group.
toSvgN :: SvgShape s => Group s -> Svg

-- | Wrap a group of shapes into an SVG <a>g</a> element, including a
--   comment with the name of the group. Apply the given styles to the
--   group.
toSvgWithStyle :: SvgShape s => Group s -> StyleAttrs -> Svg
instance GHC.Show.Show a => GHC.Show.Show (Group.Group a)
instance (GHC.Show.Show a, Shape.SvgShape a, Shape.Transformable a, Shape.Mergable a) => GHC.Base.Semigroup (Group.Group a)
instance (GHC.Show.Show a, Shape.SvgShape a, Shape.Transformable a, Shape.Mergable a) => GHC.Base.Monoid (Group.Group a)
instance Shape.Transformable a => Shape.Transformable (Group.Group a)

module Scenes.Triangles
getScene :: IO Scene

module Scenes.Simple
getScene :: IO Scene

module Scenes.Resch
getScene :: IO Scene
vectorToFloats :: Vector R -> [Float]

module Scenes.HuffmanTower
getScene :: IO Scene

module Scenes.HobermanCylinder
getScene :: IO Scene


-- | A module for handling registration of scenes so they can be rendered
--   by the CLI executable.
module Scenes.Registry

-- | Return the named scene or exit the program with an error if it doesn't
--   exist.
getSceneOrExit :: String -> IO Scene

-- | Register scenes and their CLI lable here.
scenes :: Map String (IO Scene)

-- | Comma-separated list of all scene labels registered in thei module.
scenesLabel :: String

module CLIOpts
data RenderOpts
renderOpts :: Parser RenderOpts
scene :: RenderOpts -> String
preview :: RenderOpts -> Bool

module Lib
render :: IO ()
